#!"c:\xampp7.3\perl\bin\perl.exe"
print "Content-type: text/html\n\n";
use strict;
use warnings;
use utf8;
binmode STDIN, ':encoding(cp932)';
binmode STDOUT, ':encoding(cp932)';
binmode STDERR, ':encoding(cp932)';
# 文字列を指定のフォーマットで出力するには「printf」関数又は「sprintf」関数を使います。
# printf([ファイルハンドル] 書式指定文字列, リスト);
# 戻り値 = sprintf(書式指定文字列, リスト);

# 「printf」関数は指定のファイルハンドルに対して整形した結果の文字列を出力します。ファイルハンドルを省略した場合は標準出力であるSTDOUTに対して出力しますので結果的に画面に出力されます。「sprintf」関数は整形した結果を文字列として返します。

# %[フラグ][最小幅][.精度/最大幅]型指定子

printf("番号は %03d です\n<br>", 24);
print "\n<br>";
# %03dは[0詰めにする][幅を三桁にする][10進数の数値で表す]

# フォーマット指定子以外の文字列
# 書式指定文字列にはフォーマット指定子を記述しますが、フォーマット指定子以外の文字列を記述することも可能です。書式指定文字列の中のフォーマット指定子以外の文字列は、そのまま文字列として使われます。

# printf("数値は %03d です", 30);
# 上記の場合は書式も指定文字列の中に「数値は 」と「 です」と言う文字列が記述されています。フォーマット指定子以外の文字列はそのまま文字列として使われますので結果として「数値は 030 です」と言う文字列が表示されます。

# 複数の値を変換
# また変換する値は複数指定することができます。複数の値を変換する場合は、指定した値の数だけフォーマット指定子を記述します。

# printf("Aは %03d 円、Bは %03d 円です", 30, 80);
# 上記の場合は変換する値が2つですのでフォーマット指定子も2つ記述しています。結果として「Aは 030円、Bは 080円です」と画面に表示されます。

# 値を複数指定する場合は、このようにカンマ(,)で区切って並べて記述して下さい。

# 1番目に記述された値は、書式指定文字列の中に最初に現れたフォーマット指定子を使って変換されます。同じように2番目の値は2番目に現れたフォーマット指定子で変換されていきます。このように記述された順番に従って変換が行われます。

printf("Aは %03d 円、Bは %03d 円です\n<br>", 30, 80);
print "\n<br>";

# %d   10進数
# %u   符号無し10進数
# %o   符号無し8進数
# %x   符号無し16進数
# %e   指数形式の浮動小数点
# %f   固定小数点形式の浮動小数点
# %g   浮動小数点(%e 又は %f のどちらかの形式)
# %X   %xと同じだがアルファベットを大文字で表示
# %E   %eと同じだが大文字のEを使用
# %G   %gと同じだが大文字のEを使用
# %b   符号無し2進数
# %%   は「%」と言う文字を書式文字列の中で使用する場合に使います。これは「%」と言う文字が特殊な用途で使われているためであり、エスケープシーケンスと同じ扱いです。その為、対応する値は必要ありません。
# %c   は指定した値に文字コードに対応する文字となります。例えば「65」に対して型指定子「%c」を使うと対応する「A」と言う文字となります。
# %s   は指定した値に文字列をそのまま文字列として表示します。動的に文字列を指定したい場合に使います。
# %p   は指定した値に対するポインタを表示します。使い道は良く分かっていません。
# %n   は[出力された文字数]を対応する値の箇所に指定した変数に格納します。その為「%n」自体は何も出力しません。
printf("%d\n<br>", 30); #30(10)
printf("%x\n<br>", 30); #1e(16)
printf("%o\n<br>", 30); #36(8)
print "\n<br>";

my $count;
printf("num = %d%n\n<br>", 45, $count);
print "$count\n<br>";   #文字列の文字数は「8」文字であるため、「%n」に対応する値の箇所に指定された「$count」に数値の「8」が格納されます。
print "\n<br>";

printf("数値は%d%n\n<br>", 45, $count);
print "$count\n<br>";   #UTF-8で日本語一文字は3バイト。∴11になるはず。実際は5が出力される。何かがおかしい。
# 仮説：日本語一文字も1byteとして計算すると辻褄が合う。文字列を変更するとそれらしき数値の変化が発生する。
print "\n<br>";

##########################################
# フォーマット指定子のオプションの1つであるフラグについて確認します。

# %[フラグ][最小幅][.精度/最大幅]型指定子
# フラグは次のものが用意されています。

# space   数値が正だった場合に空白を先頭に付けます
# +       数値が正だった場合に「+」を先頭に付けます
# -       左詰めに設定(デフォルトは右詰め)
# 0       右詰めの場合に0詰めを行う
# #       8進数の場合に「0」、16進数の場合に「0x」又は「0X」、2進数の場合に「0b」を先頭に付けます。(全て数値が0以外の場合のみ)。

printf("[%d]\n<br>", 30);   #[30]
printf("[% d]\n<br>", 30);  #[ 30]
printf("[% d]\n<br>", -30); #[-30]
print "\n<br>";

printf("[%d]\n<br>", 30);   #[30]
printf("[%+d]\n<br>", 30);  #[+30]
printf("[%+d]\n<br>", -30); #[-30]
print "\n<br>";

printf("[%4d]\n<br>", 30);  #[ 30]
printf("[%-4d]\n<br>", 30); #[30 ]
print "\n<br>";

printf("[%4d]\n<br>", 30);  #[  30] 最小幅を4に設定した場合。
printf("[%04d]\n<br>", 30); #[0030]
print "\n<br>";

printf("[%#o]\n<br>", 30);  #[036]  8進数の場合は先頭に0が付く。
printf("[%#x]\n<br>", 30);  #[0x1e] 16進数の場合は先頭に0xが付く。
printf("[%#b]\n<br>", 30);  #[0b11110]  2進数の場合は先頭に0bが付く。
print "\n<br>";
##########################################
# 最小幅

printf("[%d]\n<br>", 30);   #[30]   10進数
printf("[%5d]\n<br>", 30);  #[   30]    最小幅5、左詰め
printf("[%5d]\n<br>", -30); #[  -30]    最小幅5、左詰め
printf("[%-5d]\n<br>", -30);#[-30  ]    最小幅5、右詰め
printf("[%#o]\n<br>", 30);  #[036]  8進数
printf("[%#5o]\n<br>", 30); #[  036]    8進数、最小幅5、左詰め
printf("[%#x]\n<br>", 30);  #[0x1e]
printf("[%#5x]\n<br>", 30); #[ 0x1e]
printf("[%#b]\n<br>", 2);   #[0b10]
printf("[%#5b]\n<br>", 2);  #[ 0b10]
printf("[%15e]\n<br>", 12.3);   #[  1.230000e+001]
printf("[%15f]\n<br>", 12.3);   #[      12.300000]
printf("[%3d]\n<br>", 760128);  #[760128]
print "\n<br>";
##########################################

printf("%f\n<br>", 0.012);  #0.012000
printf("%.4f\n<br>", 0.012);    #0.0120 精度4。結果の小数点以下の桁数が変換します。
printf("%e\n<br>", 0.012);  #1.200000e-002
printf("%.3e\n<br>", 0.012);    #1.200e-002 指定形式の浮動小数点。精度3。

printf("[%.4d]\n<br>", 123);    #[0123] 指定桁数4に一足りないのでその分は0詰め。
printf("[%.6d]\n<br>", 123);    #[000123]   指定桁数6
printf("[%8.6d]\n<br>", 123);   #[  00123]  指定桁数6、

printf("[%.6x]\n<br>", 123);    #[00007b]   16進数
printf("[%#.6x]\n<br>", 123);   #[0x00007b]

printf("[%s]\n<br>", "Javascript"); #[Javascript]
printf("[%.5s]\n<br>", "Javascript");   #[Javas]    文字列に対しては精度ではなく最大幅として機能する。つまり5文字。
print "\n<br>";
##########################################

printf("[%.6d]\n<br>", 123);    #精度を6桁に設定[000123]
printf("[%.*d]\n<br>", 6, 123); #精度を6桁に設定[000123]

printf("[%s] [%.*s] \n<br>", "Hello", 3, "Hello");#[Hello][Hel]
print "\n<br>";
##########################################
printf("A=%d, B=%d\n<br>", 123, 456);   #A=123, B=456 素直に並べられた順に変換されます。
printf("A=%2\$d, B=%1\$d\n<br>", 123, 456); #A=456, B=123   2\$で2つめの値を代入、1\$で１つめの値を代入。インデックスは1,2,3であり、0からでないので注意。シングルクオーテーションの中ならば2$,1$だが、今回はダブルクオーテーション内部なのでエスケープシーケンスが必要。
printf("A=%2\$d, B=%2\$d\n<br>", 123, 456); #A=456, B=456
printf("%2\$d, %d, %1\$d, %d\n<br>", 123, 456); #456, 123, 123, 456 インデックスを指定しないフォーマット指定子については、通常通りにリストに指定された値が先頭から順に使用されます。